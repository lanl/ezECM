}
cat_index <- category
category <- cat_names[category]
}else if(is.character(category)){
cat_index <- which(cat_names == category)
if(length(cat_index) == 0){
stop("Supplied argument 'category' is not found within the categories used to generate 'object'.  Check for correct spelling of the 'category' argument.")
}
}else{
stop("Supplied argument 'category' must be an integer or character string which provides the index or names the category of interest.  Typically 'category' corresponds to the name used to specify detonations.")
}
## Now the samples are for a particular category too
#cat_samples <- X[category,]
cat_samples <- X[category]
cat_samples
else_samples <- X[-which(category == dimnames(X)[[1]]), ,drop = FALSE]
## are grouped together
else_samples
str(cat_samples)
summary(bayes_pred)
as.data.frame(bayes_pred$epz[index , , drop = FALSE])
str(as.data.frame(bayes_pred$epz[index , , drop = FALSE]))
object <- bayes_pred
X <- as.data.frame(object$epz[index , , drop = FALSE])
cat_names <- colnames(X)
if(is.numeric(category)){
if(category > length(cat_names)){
stop("Integer value for the argument 'category' provided.  The value provided selects the category index and must be less than or equal to the number of total event categories.")
}
cat_index <- category
category <- cat_names[category]
}else if(is.character(category)){
cat_index <- which(cat_names == category)
if(length(cat_index) == 0){
stop("Supplied argument 'category' is not found within the categories used to generate 'object'.  Check for correct spelling of the 'category' argument.")
}
}else{
stop("Supplied argument 'category' must be an integer or character string which provides the index or names the category of interest.  Typically 'category' corresponds to the name used to specify detonations.")
}
## Now the samples are for a particular category too
#cat_samples <- X[category,]
cat_samples <- X[category]
## and the other categories
else_samples <- X[-which(category == dimnames(X)[[1]]), ,drop = FALSE]
else_samples
dimnames(X)
X
dimnames(X)[[2]]
else_samples <- X[-which(category == dimnames(X)[[2]]), ,drop = FALSE]
else_samples
category
which(category == dimnames(X)[[2]])
else_samples <- X[,-which(category == dimnames(X)[[2]]) ,drop = FALSE]
else_samples
else_samples <- colSums(else_samples)
else_samples
colSums(else_samples)
else_samples <- X[,-which(category == dimnames(X)[[2]]) ,drop = FALSE]
str(else_samples)
colSums(matrix(1, ncol = 3, nrow = 4))
matrix(1, ncol = 3, nrow = 4)
else_samples <- X[,-which(category == dimnames(X)[[2]]) ,drop = FALSE]
## are grouped together
else_samples <- rowSums(else_samples)
else_samples
Xall <- cbind(X,else_samples)
Xall
cat_index
nrow(Xall)
c(cat_index, nrow(Xall), (1:(nrow(Xall)-1))[-cat_index])
c(cat_index, ncol(Xall), (1:(ncol(Xall)-1))[-cat_index])
Xall
unlist(unname(Xall))
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum <- rbind(stat.sum[1:2,], rep(".....", times = 3), stat.sum[3:nrow(stat.sum),])
rownames(stat.sum)[3] <- "...Itemized Categories..."
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum <- rbind(stat.sum[1:2,], rep(".....", times = 1), stat.sum[3:nrow(stat.sum),])
rownames(stat.sum)[3] <- "...Itemized Categories..."
stat.sum
category
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
stat.sum <- rbind(stat.sum[1:2,], rep(".....", times = 1), stat.sum[3:nrow(stat.sum),])
stat.sum
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
sum(stat.sum[1:2,])
X <- as.data.frame(object$epz[index , , drop = FALSE])
str(X)
sum(unlist(unname(X)))
X <- as.data.frame(object$epz[index , , drop = FALSE])
cat_names <- colnames(X)
if(is.numeric(category)){
if(category > length(cat_names)){
stop("Integer value for the argument 'category' provided.  The value provided selects the category index and must be less than or equal to the number of total event categories.")
}
cat_index <- category
category <- cat_names[category]
}else if(is.character(category)){
cat_index <- which(cat_names == category)
if(length(cat_index) == 0){
stop("Supplied argument 'category' is not found within the categories used to generate 'object'.  Check for correct spelling of the 'category' argument.")
}
}else{
stop("Supplied argument 'category' must be an integer or character string which provides the index or names the category of interest.  Typically 'category' corresponds to the name used to specify detonations.")
}
## Now the samples are for a particular category too
#cat_samples <- X[category,]
cat_samples <- X[category]
## and the other categories
else_samples <- X[,-which(category == dimnames(X)[[2]]) ,drop = FALSE]
else_samples
else_samples <- rowSums(else_samples)
else_samples
cat_samples
cat_samples + else_samples
X <- as.data.frame(object$epz[index , , drop = FALSE])
cat_names <- colnames(X)
if(is.numeric(category)){
if(category > length(cat_names)){
stop("Integer value for the argument 'category' provided.  The value provided selects the category index and must be less than or equal to the number of total event categories.")
}
cat_index <- category
category <- cat_names[category]
}else if(is.character(category)){
cat_index <- which(cat_names == category)
if(length(cat_index) == 0){
stop("Supplied argument 'category' is not found within the categories used to generate 'object'.  Check for correct spelling of the 'category' argument.")
}
}else{
stop("Supplied argument 'category' must be an integer or character string which provides the index or names the category of interest.  Typically 'category' corresponds to the name used to specify detonations.")
}
## Now the samples are for a particular category too
#cat_samples <- X[category,]
cat_samples <- X[category]
## and the other categories
else_samples <- X[,-which(category == dimnames(X)[[2]]) ,drop = FALSE]
## are grouped together
else_samples <- rowSums(else_samples)
## Were going to replicate some of them?
Xall <- cbind(X,else_samples)
Xall
reorder <- c(cat_index, ncol(Xall), (1:(ncol(Xall)-1))[-cat_index])
Xall <- Xall[,reorder]
Xall
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
stat.sum
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
stat.sum <- rbind(stat.sum[1:2,], rep(".....", times = 1), stat.sum[3:nrow(stat.sum),])
stat.sum
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum[1:2,]
rep(".....", times = 1)
stat.sum[3:nrow(stat.sum),]
stat.sum <- rbind(stat.sum[1:2, , drop = FALSE], rep(".....", times = 1), stat.sum[3:nrow(stat.sum), , drop = FALSE])
stat.sum
rownames(stat.sum)[3] <- "...Itemized Categories..."
stat.sum
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
stat.sum[3:nrow(stat.sum), , drop = FALSE]
stat.sum <- rbind(stat.sum[1:2, , drop = FALSE], rep(".....", times = 1), stat.sum[3:nrow(stat.sum), , drop = FALSE])
stat.sum
rownames(stat.sum)
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
stat.sum[3:nrow(stat.sum), , drop = FALSE]
df1 <- data.frame(matrix(runif(2)), ncol = 1, nrow = 2)
df2 <- data.frame(matrix(runif(3)), ncol = 1, nrow = 3)
rownames(df1) <- c("a", "b")
rownames(df2) <- c("y",
"z")
rownames(df2) <- c("x", y", "z")
rownames(df2) <- c("x", "y", "z")
rbind(df1, df2)
df1
df2
df2 <- data.frame(matrix(runif(3), ncol = 1, nrow = 3))
df1 <- data.frame(matrix(runif(2), ncol = 1, nrow = 2))
rownames(df2) <- c("x", "y", "z")
rownames(df1) <- c("a", "b")
rbind(df1, df2)
df1
df2
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum <- rbind(stat.sum[1:2, , drop = FALSE], data.frame(E = rep(".....", times = 1)), stat.sum[3:nrow(stat.sum), , drop = FALSE])
stat.sum
rownames(stat.sum)[3] <- "...Itemized Categories..."
stat.sum
cat("\n\n")
cat("Summary Statistics")
print(knitr::kable(stat.sum, format = "rst", digits = 2, row.names = TRUE, col.names = c("Expected Probability of Category")))
summary(bayes_pred)
?knitr::kable
cat("\n\n")
cat("Summary Statistics")
print(knitr::kable(stat.sum, format = "rst", digits = 2, row.names = TRUE, col.names = c("Expected Probability of Category")))
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
?round
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum$E <- round(stat.sum$E, digits = 3)
stat.sum <- rbind(stat.sum[1:2, , drop = FALSE], data.frame(E = rep(".....", times = 1)), stat.sum[3:nrow(stat.sum), , drop = FALSE])
rownames(stat.sum)[3] <- "...Itemized Categories..."
# Print stat.sum data.frame
cat("\n\n")
cat("Summary Statistics")
print(knitr::kable(stat.sum, format = "rst", digits = 2, row.names = TRUE, col.names = c("Expected Probability of Category")))
stat.sum
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum
summary(bayes_pred)
stat.sum <- data.frame(matrix(NA, ncol = 1, nrow = ncol(Xall)))
names(stat.sum) <- c("E")
# Expectation
stat.sum$E <- unlist(unname(Xall))
# HDI
# crit_I <- t(apply(Xall,1,HDInterval::hdi))
#
# stat.sum$LB <- crit_I[,1]
# stat.sum$UB <- crit_I[,2]
#
# stat.sum <- as.data.frame(sapply(stat.sum, round, digits = 2))
rownames(stat.sum) <- c(category, paste0("Not ", category), colnames(X)[-cat_index])
stat.sum$E <- round(stat.sum$E, digits = 3)
stat.sum <- rbind(stat.sum[1:2, , drop = FALSE], data.frame(E = rep(".....", times = 1)), stat.sum[3:nrow(stat.sum), , drop = FALSE])
rownames(stat.sum)[3] <- "...Itemized Categories..."
cat("\n\n")
cat("Summary Statistics")
print(knitr::kable(stat.sum, format = "rst", digits = 2, row.names = TRUE, col.names = c("Expected Probability of Category")))
# New data.frame
loss_df <- data.frame(matrix(NA, ncol = 2, nrow = 2))
names(loss_df) <- c("EL", "MinEL")
# Expected Loss
# Arrow Pointing to minimum expected loss
Ep <- as.numeric(stat.sum[1:2, 1])
a1 <- sum(C[,1]*Ep)
a2 <- sum(C[,2]*Ep)
loss_df$EL <- c(a1,a2)
loss_df$MinEL[which.min(loss_df$EL)] <- "<-"
loss_df$MinEL[is.na(loss_df$MinEL)] <- " "
rownames(loss_df) <- rownames(stat.sum)[1:2]
percent_crit_nuem <- (C[2,2] - C[2,1])
percent_crit_denom <- C[1,1] - C[2,1] + C[2,2] - C[1,2]
if(percent_crit_denom < 0){
equality_sign <- ">"
}else{
equality_sign <- "<"
}
cat("\n\n")
cat(paste0("Decision Criterion: select ", category, " if E[p(", category, ")] ", equality_sign, " ", round(percent_crit_nuem/percent_crit_denom, digits = 2), ",\nequivalent to minimum expected loss"))
print(knitr::kable(loss_df, format = "rst", row.names = TRUE, col.names = c("Expected Loss", "Minimum Expected Loss")))
stat.sum
X
?becm_decision
str(bayes_pred$epz)
str(bayes_pred)
bayes)pred_missing
str(bayes_pred_missing)
summary(bayes_pred_missing
)
str(bayes_pred_missing)
length(bayes_pred_missing$BayesECMfit$data$Kfull)
length(bayes_pred$BayesECMfit$Y)
predtemp <- bayes_pred
C
str(predtemp)
predtemp$epz <- predtemp$epz[index,]
becm_decision(predtemp, vic = as.character(category), C = C, pn = FALSE)
bayes_pred$umissing
?summary.BayesECMpred
?pnorm
pnorm(1.98)
object$BayesECMfit$data$Kfull
(1:3) == (1:3)
all((1:3) == (1:3))
K
(1:5) %in% c(2,3)
(1:5)[which((1:5) %in% c(2,3))]
(1:5)[which(!(1:5) %in% c(2,3))]
bayes_pred$BayesECMfit$MCMC$Ybar
bayes_pred_missing$BayesECMfit$MCMC$Ybar
str(bayes_pred_missing$BayesECMfit$MCMC$Ybar)
str(bayes_pred_missing$BayesECMfit$MCMC)
bayes_pred_missing$thinning
object$thinning
rep(0, times = NA)
Kfull <- object$BayesECMfit$data$Kfull
K <- length(object$BayesECMfit$Y)
if(all(Kfull %in% (1:K))){
Kmissing <- NA
iters <- NA
}else{
Kmissing <- (1:K)[which(!((1:K) %in% Kfull))]
iters <- ncol(object$BayesECMfit$MCMC[[Kmissing[1]]])
}
str(Kfull)
bayes_pred_missing$BayesECMfit$data$Kfull
K
Kfull <- bayes_pred_missing$BayesECMfit$data$Kfull
Kmissing <- (1:K)[which(!((1:K) %in% Kfull))]
Kmissing
Kfull <- object$BayesECMfit$data$Kfull
K <- length(object$BayesECMfit$Y)
length(integer(0))
thinning
str(bayes_pred_missing$BayesECMfit$MCMC$SighatN[[1]])
str(bayes_pred_missing$BayesECMfit$MCMC$predmean[[1]])
bayes_pred_missing$thinning
max(bayes_pred_missing$thinning)
stat.sum
summary(bayes_pred)
summary(bayes_pred)
object$BayesECMfit$MCMC$predmean[[k]]
k <- 1
object$BayesECMfit$MCMC$predmean[[k]]
summary(yg)
summary(bayes_pred)
yg
str(yg)
summary(bayes_pred)
summary(bayes_pred)
Kmissingg
summary(bayes_pred)
summary(bayes_pred_missing)
summary(bayes_pred_missing)
summary(bayes_pred)
pval_sample_g[[1]]
summary(bayes_pred_missing)
pval_sample_g[[1]]
str(pval_sample_g)
?mean
summary(bayes_pred_missing)
summary(bayes_pred_missing)
pval_samples_g
summary(bayes_pred_missing)
pval_samples_g
pval_sample_g
summary(bayes_pred_missing)
summary(bayes_pred_missing)
test_logicg
length(integer(0))
bayes_pred_missing$BayesECMfit$data$Kfull
bayes_pred_missing$BayesECMfit$data$Kfull %in% (1:3)
summary(bayes_pred_missing)
test_logicg
pval_samplesg
Kmissingg
Kmissing <- NULL
summary(bayes_pred_missing)
Kmissingg
bayes_pred_missing$BayesECMfit$data$Kfull
summary(bayes_pred_missing)
tg
Kmissingg
Kmissingg <<- NULL
Kmissingg
summary(bayes_pred_missing)
Kmissingg
Kfull <- bayes_pred_missing$BayesECMfit$data$Kfull
K
all(Kfull %in% (1:K))
summary(bayes_pred_missing)
ncol(bayes_pred_missing$BayesECMfit$MCMC$Ybar[[1]])
summary(bayes_pred_missing)
Kmissingg
str(bayes_pred_missing$BayesECMfit$MCMC$SighatN[[1]])
str(bayes_pred_missing$BayesECMfit$MCMC$SighatN[[1]])
summary(bayes_pred_missing)
summary(bayes_pred_missing, category = 2)
summary(bayes_pred_missing, category = 3)
Xall
str(Xall)
